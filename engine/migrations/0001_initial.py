# -*- coding: utf-8 -*-
# Generated by Django 1.11.10 on 2018-06-29 09:16
from __future__ import unicode_literals

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AnalyticCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ApiMapper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.TextField(blank=True, null=True)),
                ('number', models.TextField(blank=True, null=True)),
                ('choice_name', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='AutoCorrectWordList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.TextField()),
            ],
            options={
                'verbose_name': 'Autocorrect Word List',
                'verbose_name_plural': 'Autocorrect Word List',
            },
        ),
        migrations.CreateModel(
            name='BillApi',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to=b'bill_files')),
            ],
        ),
        migrations.CreateModel(
            name='BillApiCustom',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payee_id', models.TextField(blank=True, null=True)),
                ('payee_name', models.TextField(blank=True, null=True)),
                ('payee_type', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, default=b'web', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ChannelSentences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-pk',),
                'verbose_name': 'Channel Sentences',
                'verbose_name_plural': 'Channel Sentences',
            },
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_not_recognized', models.TextField(default=b"I'm sorry, you can ask me things like...")),
                ('recommended_queries_statement', models.TextField(default=b"I'm sorry, did you wish to mean")),
                ('entry_not_present_in_database', models.TextField(default=b'Sorry, we could not find the corresponding entry in the records.')),
                ('cancel_button_message', models.TextField(default=b'Hello, what would you like to know about?')),
                ('custom_stop_word', models.TextField(default=b'')),
                ('email_id', models.TextField(default=b'aman@allincall.in')),
                ('initial_message', models.TextField(default=b'Hi, I am AllinCall Virtual Assistant.')),
                ('base_response_1', models.TextField(blank=True, default=b'Hi', null=True)),
                ('base_response_2', models.TextField(blank=True, default=b'', null=True)),
                ('base_response_3', models.TextField(blank=True, default=b'', null=True)),
                ('base_response_4', models.TextField(blank=True, default=b'', null=True)),
                ('base_response_5', models.TextField(blank=True, default=b'', null=True)),
                ('entities_enabled', models.BooleanField(default=False)),
                ('intents_enabled', models.BooleanField(default=False)),
                ('entities_group_enabled', models.BooleanField(default=False)),
                ('question_entities_group_enabled', models.BooleanField(default=False)),
                ('trees_enabled', models.BooleanField(default=False)),
                ('word_mappers_enabled', models.BooleanField(default=False)),
                ('mappers_enabled', models.BooleanField(default=False)),
                ('sentences_enabled', models.BooleanField(default=False)),
                ('auto_correct_words_enabled', models.BooleanField(default=False)),
                ('channel_sentences_enabled', models.BooleanField(default=False)),
                ('profile_enabled', models.BooleanField(default=False)),
                ('query_cnt_enabled', models.BooleanField(default=False)),
                ('variables_enabled', models.BooleanField(default=False)),
                ('feedback_general_enabled', models.BooleanField(default=False)),
                ('query_enabled', models.BooleanField(default=False)),
                ('analytics_cnt_enabled', models.BooleanField(default=False)),
                ('data_enabled', models.BooleanField(default=False)),
                ('recommendations_enabled', models.BooleanField(default=False)),
                ('feedback_query_enabled', models.BooleanField(default=False)),
                ('config_enabled', models.BooleanField(default=False)),
                ('unique_users_enabled', models.BooleanField(default=False)),
                ('data_validators_enabled', models.BooleanField(default=False)),
                ('file_storage', models.BooleanField(default=False)),
                ('number_mappers_enabled', models.BooleanField(default=False)),
                ('channel_enabled', models.BooleanField(default=False)),
                ('language_enabled', models.BooleanField(default=False)),
                ('leads_enabled', models.BooleanField(default=False)),
                ('product_model_enabled', models.BooleanField(default=False)),
                ('faq_enabled', models.BooleanField(default=False)),
                ('testbot_chat_enabled', models.BooleanField(default=False)),
                ('url_customer_id', models.TextField(blank=True, null=True)),
                ('url_show_policy', models.TextField(blank=True, null=True)),
                ('parse_api_error_message', models.TextField(blank=True, null=True)),
                ('encrypt', models.BooleanField(default=False)),
                ('facebook_endpoint_url', models.TextField(blank=True, null=True)),
                ('signals_enabled', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Data',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_name', models.TextField()),
                ('entity_value', models.TextField()),
                ('count', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Data',
                'verbose_name_plural': 'Data',
            },
        ),
        migrations.CreateModel(
            name='DataValidators',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('function', models.TextField(blank=True, default=b'', null=True)),
                ('run_at_start', models.BooleanField(default=False)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Channel')),
            ],
            options={
                'verbose_name': 'Data Validators',
                'verbose_name_plural': 'Data Validators',
            },
        ),
        migrations.CreateModel(
            name='Entities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entity_name', models.TextField()),
                ('keywords', models.TextField(blank=True, default=b'', help_text=b'The keywords sets should be comma separated and the keywords should be space separated')),
                ('level', models.IntegerField(default=0)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Entities')),
            ],
            options={
                'verbose_name': 'Entity',
                'verbose_name_plural': 'Entities',
            },
        ),
        migrations.CreateModel(
            name='EntityGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('is_clickable', models.BooleanField(default=True)),
                ('is_typable', models.BooleanField(default=False)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_persistent', models.BooleanField(default=False)),
                ('is_loop', models.BooleanField(default=False)),
                ('multi', models.BooleanField(default=False)),
                ('is_date', models.BooleanField(default=False)),
                ('is_checkbox', models.BooleanField(default=False)),
                ('is_typable_special', models.BooleanField(default=False)),
                ('choices', models.ManyToManyField(blank=True, related_name='entity_choices', to='engine.Entities')),
            ],
            options={
                'verbose_name': 'EntityGroup',
                'verbose_name_plural': 'EntityGroup',
            },
        ),
        migrations.CreateModel(
            name='Files',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.TextField(blank=True, null=True)),
                ('file', models.FileField(upload_to=b'files/')),
            ],
            options={
                'verbose_name': 'file - Files',
                'verbose_name_plural': 'file - Files',
            },
        ),
        migrations.CreateModel(
            name='Intent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('keywords', models.TextField(default=b'', help_text=b'The keywords sets should be comma separated and the keywords should be space separated')),
                ('restricted_keywords', models.TextField(blank=True, default=b'', help_text=b'The keywords sets should be comma separated and the keywords should be space separated', null=True)),
                ('answer', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('level', models.IntegerField(default=1)),
                ('test_sentences', models.TextField(blank=True, default=b'', help_text=b'sentences should be separeted by new line.', null=True)),
                ('misc', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Intent',
                'verbose_name_plural': 'Intents',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, default=b'eng', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Leads',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('email_id', models.TextField(blank=True, null=True)),
                ('contact', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Lead',
                'verbose_name_plural': 'Leads',
            },
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField(blank=True, null=True)),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('answer_succesfull', models.BooleanField(default=False)),
                ('chatbot_answer', models.TextField(blank=True, null=True)),
                ('clicked', models.BooleanField(default=False)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Channel')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Language')),
            ],
            options={
                'verbose_name': 'Log',
                'verbose_name_plural': 'Logs',
            },
        ),
        migrations.CreateModel(
            name='Mapper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Entities')),
            ],
            options={
                'verbose_name': 'Mapper',
                'verbose_name_plural': 'Mappers',
            },
        ),
        migrations.CreateModel(
            name='NumberMappers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.TextField()),
                ('values', models.TextField()),
                ('name', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=500, null=True)),
                ('current_query', models.TextField(blank=True, null=True)),
                ('re_question', models.BooleanField(default=False)),
                ('stage', models.TextField(blank=True, default=b'pre', null=True)),
                ('current_entity', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Entities')),
                ('current_intent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Intent')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profile',
            },
        ),
        migrations.CreateModel(
            name='QueryCnt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField(blank=True, null=True)),
                ('count', models.IntegerField(default=0)),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Channel')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Language')),
            ],
        ),
        migrations.CreateModel(
            name='QueryFeedbackCounter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('like_cnt', models.IntegerField(default=0)),
                ('dislike_cnt', models.IntegerField(default=0)),
                ('query', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.QueryCnt')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Profile')),
            ],
            options={
                'verbose_name': 'Query Feedback',
                'verbose_name_plural': 'Query Feedback',
            },
        ),
        migrations.CreateModel(
            name='QuestionsEntityGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('entity_group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='engine.EntityGroup')),
                ('question', models.ForeignKey(blank=True, help_text=b'This is the question to be asked in the flow.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_entitytype', to='engine.ChannelSentences')),
                ('re_question', models.ForeignKey(blank=True, help_text=b'This is the question to be asked when user enters an invalid query.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='re_question_entitytype', to='engine.ChannelSentences')),
            ],
            options={
                'verbose_name': 'QuestionEntityGroup',
                'verbose_name_plural': 'QuestionEntityGroup',
            },
        ),
        migrations.CreateModel(
            name='Recommendation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('query', models.TextField()),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='engine.Entities')),
                ('intent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='engine.Intent')),
            ],
            options={
                'verbose_name': 'Recommendation',
                'verbose_name_plural': 'Recommendations',
            },
        ),
        migrations.CreateModel(
            name='Sentences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sentence', ckeditor.fields.RichTextField()),
                ('channel', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Channel')),
                ('file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Files')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Language')),
            ],
            options={
                'ordering': ('-pk',),
                'verbose_name': 'Sentences',
                'verbose_name_plural': 'Sentences',
            },
        ),
        migrations.CreateModel(
            name='TestModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('intent_id', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('sentences', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('is_diversify', models.BooleanField(default=False)),
                ('is_tree_mapper_create', models.BooleanField(default=True)),
                ('is_fixed', models.BooleanField(default=False)),
                ('answer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tree_answer', to='engine.ChannelSentences')),
                ('mapper', models.ManyToManyField(blank=True, related_name='mappers', to='engine.Mapper')),
                ('number_mapper', models.ManyToManyField(blank=True, related_name='number_mappers', to='engine.NumberMappers')),
                ('question_entity_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.QuestionsEntityGroup')),
            ],
            options={
                'verbose_name': 'Tree',
                'verbose_name_plural': 'Tree',
            },
        ),
        migrations.CreateModel(
            name='UniqueUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.TextField()),
                ('time', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserPipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.CharField(max_length=100)),
                ('pipe', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Variables',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('variable_name', models.TextField()),
                ('variable_value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='WordMapper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('keyword', models.TextField(blank=True, default=b'', null=True)),
                ('similar_words', models.TextField(default=b'')),
            ],
            options={
                'verbose_name': 'WordMapper',
                'verbose_name_plural': 'WordMappers',
            },
        ),
        migrations.AddField(
            model_name='profile',
            name='tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Tree'),
        ),
        migrations.AddField(
            model_name='mapper',
            name='next_tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tree_mapper', to='engine.Tree'),
        ),
        migrations.AddField(
            model_name='log',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Profile2', to='engine.Profile'),
        ),
        migrations.AddField(
            model_name='intent',
            name='tree',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='intent_set', to='engine.Tree'),
        ),
        migrations.AddField(
            model_name='datavalidators',
            name='entity_group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.EntityGroup'),
        ),
        migrations.AddField(
            model_name='data',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Profile'),
        ),
        migrations.AddField(
            model_name='channelsentences',
            name='group_of_sentences',
            field=models.ManyToManyField(blank=True, to='engine.Sentences'),
        ),
        migrations.AddField(
            model_name='analyticcount',
            name='entity',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Entities'),
        ),
        migrations.AddField(
            model_name='analyticcount',
            name='intent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='engine.Intent'),
        ),
    ]
